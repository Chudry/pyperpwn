from dataclasses import dataclass, asdict
from enum import IntEnum

from dacite import from_dict

NO_CVSS_DEFINED = -1


@dataclass
class Vulnerability:
    ip: str
    port: int
    cvss: float
    protocol: str
    cve: str
    bid: str
    detection: str
    name: str
    solution_type: str

    @staticmethod
    def sort_vulns(vulns):
        if not vulns or len(vulns) == 0:
            return []
        vulns.sort(key=lambda x: float(x.cvss) if not x.cvss == '' else NO_CVSS_DEFINED, reverse=True)
        return vulns

    def to_dict(self):
        return asdict(self)

    @staticmethod
    def from_dict(vuln_dict):
        return from_dict(data_class=Vulnerability, data=vuln_dict)


class VulnIntention(IntEnum):
    INTRUSIVE = 1
    DESTRUCTIVE = 2
    BOTH = 3
    NONE = 4


class VulnType:
    intentions = {
        'Denial Of Service': VulnIntention.DESTRUCTIVE,
        'Execute Code': VulnIntention.INTRUSIVE,
        'Overflow': VulnIntention.BOTH,
        'XSS': VulnIntention.INTRUSIVE,
        'Cross Site Scripting': VulnIntention.INTRUSIVE,
        'Directory traversal': VulnIntention.INTRUSIVE,
        'Bypass Something': VulnIntention.INTRUSIVE,
        'Obtain Information': VulnIntention.INTRUSIVE,
        'Gain Privilege': VulnIntention.INTRUSIVE,
        'SQL Injection': VulnIntention.INTRUSIVE,
        'File Inclusion': VulnIntention.INTRUSIVE,
        'Memory Corruption': VulnIntention.DESTRUCTIVE,
        'CSRF': VulnIntention.INTRUSIVE,
        'Http Response Splitting': VulnIntention.INTRUSIVE
    }

    @staticmethod
    def types_to_intentions(console, types):
        if types is None:
            return []
        intention = []
        for type in types:
            type = type.strip()
            try:
                intention.append(VulnType.intentions[type])
            except KeyError as e:
                console.error("\t {}".format(e))
                pass
        intentions = list(set(intention))
        console.debug("\t extracted intentions: {}".format(intentions))
        return intentions
